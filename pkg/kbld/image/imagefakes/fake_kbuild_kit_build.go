// Code generated by counterfeiter. DO NOT EDIT.
package imagefakes

import (
	"sync"

	"github.com/k14s/kbld/pkg/kbld/config"
	"github.com/k14s/kbld/pkg/kbld/image"
)

type FakeKBuildKitBuild struct {
	BuildAndPushStub        func(string, string, *config.ImageDestination, config.SourceKubectlBuildkitOpts) (string, error)
	buildAndPushMutex       sync.RWMutex
	buildAndPushArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *config.ImageDestination
		arg4 config.SourceKubectlBuildkitOpts
	}
	buildAndPushReturns struct {
		result1 string
		result2 error
	}
	buildAndPushReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKBuildKitBuild) BuildAndPush(arg1 string, arg2 string, arg3 *config.ImageDestination, arg4 config.SourceKubectlBuildkitOpts) (string, error) {
	fake.buildAndPushMutex.Lock()
	ret, specificReturn := fake.buildAndPushReturnsOnCall[len(fake.buildAndPushArgsForCall)]
	fake.buildAndPushArgsForCall = append(fake.buildAndPushArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *config.ImageDestination
		arg4 config.SourceKubectlBuildkitOpts
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("BuildAndPush", []interface{}{arg1, arg2, arg3, arg4})
	fake.buildAndPushMutex.Unlock()
	if fake.BuildAndPushStub != nil {
		return fake.BuildAndPushStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.buildAndPushReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKBuildKitBuild) BuildAndPushCallCount() int {
	fake.buildAndPushMutex.RLock()
	defer fake.buildAndPushMutex.RUnlock()
	return len(fake.buildAndPushArgsForCall)
}

func (fake *FakeKBuildKitBuild) BuildAndPushCalls(stub func(string, string, *config.ImageDestination, config.SourceKubectlBuildkitOpts) (string, error)) {
	fake.buildAndPushMutex.Lock()
	defer fake.buildAndPushMutex.Unlock()
	fake.BuildAndPushStub = stub
}

func (fake *FakeKBuildKitBuild) BuildAndPushArgsForCall(i int) (string, string, *config.ImageDestination, config.SourceKubectlBuildkitOpts) {
	fake.buildAndPushMutex.RLock()
	defer fake.buildAndPushMutex.RUnlock()
	argsForCall := fake.buildAndPushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeKBuildKitBuild) BuildAndPushReturns(result1 string, result2 error) {
	fake.buildAndPushMutex.Lock()
	defer fake.buildAndPushMutex.Unlock()
	fake.BuildAndPushStub = nil
	fake.buildAndPushReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeKBuildKitBuild) BuildAndPushReturnsOnCall(i int, result1 string, result2 error) {
	fake.buildAndPushMutex.Lock()
	defer fake.buildAndPushMutex.Unlock()
	fake.BuildAndPushStub = nil
	if fake.buildAndPushReturnsOnCall == nil {
		fake.buildAndPushReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.buildAndPushReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeKBuildKitBuild) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildAndPushMutex.RLock()
	defer fake.buildAndPushMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKBuildKitBuild) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image.KBuildKitBuild = new(FakeKBuildKitBuild)
