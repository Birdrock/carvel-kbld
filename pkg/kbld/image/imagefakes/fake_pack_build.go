// Code generated by counterfeiter. DO NOT EDIT.
package imagefakes

import (
	"sync"

	imagea "github.com/k14s/kbld/pkg/kbld/builder/docker"
	imageb "github.com/k14s/kbld/pkg/kbld/builder/pack"
	"github.com/k14s/kbld/pkg/kbld/image"
)

type FakePackBuild struct {
	BuildStub        func(string, string, imageb.PackBuildOpts) (imagea.DockerTmpRef, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 imageb.PackBuildOpts
	}
	buildReturns struct {
		result1 imagea.DockerTmpRef
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 imagea.DockerTmpRef
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePackBuild) Build(arg1 string, arg2 string, arg3 imageb.PackBuildOpts) (imagea.DockerTmpRef, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 imageb.PackBuildOpts
	}{arg1, arg2, arg3})
	fake.recordInvocation("Build", []interface{}{arg1, arg2, arg3})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.buildReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackBuild) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakePackBuild) BuildCalls(stub func(string, string, imageb.PackBuildOpts) (imagea.DockerTmpRef, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *FakePackBuild) BuildArgsForCall(i int) (string, string, imageb.PackBuildOpts) {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePackBuild) BuildReturns(result1 imagea.DockerTmpRef, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 imagea.DockerTmpRef
		result2 error
	}{result1, result2}
}

func (fake *FakePackBuild) BuildReturnsOnCall(i int, result1 imagea.DockerTmpRef, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 imagea.DockerTmpRef
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 imagea.DockerTmpRef
		result2 error
	}{result1, result2}
}

func (fake *FakePackBuild) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePackBuild) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image.PackBuild = new(FakePackBuild)
